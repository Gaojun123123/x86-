     1                                           ;代码清单5-1
     2                                           ;文件名：c05_mbr.asm
     3                                           ;文件说明：硬盘主引导扇区代码
     4                                           ;创建日期：2020-7-24 21:21
     5                                  
     6 00000000 B800B8                           mov ax,0xb800                 ;指向文本模式的显示缓冲区
     7 00000003 8EC0                             mov es,ax
     8                                  
     9                                           ;以下显示字符串"Label offset:"
    10 00000005 26C606000048                     mov byte [es:0x00],'H'
    11 0000000B 26C606010007                     mov byte [es:0x01],0x07
    12 00000011 26C606020065                     mov byte [es:0x02],'e'
    13 00000017 26C606030007                     mov byte [es:0x03],0x07
    14 0000001D 26C60604006C                     mov byte [es:0x04],'l'
    15 00000023 26C606050007                     mov byte [es:0x05],0x07
    16 00000029 26C60606006C                     mov byte [es:0x06],'l'
    17 0000002F 26C606070007                     mov byte [es:0x07],0x07
    18 00000035 26C60608006F                     mov byte [es:0x08],'o'
    19 0000003B 26C606090007                     mov byte [es:0x09],0x07
    20 00000041 26C6060A0020                     mov byte [es:0x0a],' '
    21 00000047 26C6060B0007                     mov byte [es:0x0b],0x07
    22 0000004D 26C6060C002C                     mov byte [es:0x0c],","
    23 00000053 26C6060D0007                     mov byte [es:0x0d],0x07
    24 00000059 26C6060E0077                     mov byte [es:0x0e],'w'
    25 0000005F 26C6060F0007                     mov byte [es:0x0f],0x07
    26 00000065 26C60610006F                     mov byte [es:0x10],'o'
    27 0000006B 26C606110007                     mov byte [es:0x11],0x07
    28 00000071 26C606120072                     mov byte [es:0x12],'r'
    29 00000077 26C606130007                     mov byte [es:0x13],0x07
    30 0000007D 26C606140064                     mov byte [es:0x14],'d'
    31 00000083 26C606150007                     mov byte [es:0x15],0x07
    32 00000089 26C606160020                     mov byte [es:0x16],' '
    33 0000008F 26C606170007                     mov byte [es:0x17],0x07
    34 00000095 26C60618003A                     mov byte [es:0x18],':'
    35 0000009B 26C606190007                     mov byte [es:0x19],0x07
    36                                  
    37 000000A1 B8[2E01]                         mov ax,number                 ;取得标号number的偏移地址,是一个地址
    38 000000A4 BB0A00                           mov bx,10           ;10是作为除数送到bx中
    39                                  
    40                                           ;设置数据段的基地址
    41 000000A7 8CC9                             mov cx,cs           ;cs是代码寄存器，cx是
    42 000000A9 8ED9                             mov ds,cx
    43                                           ;目的是访问访问number指向的内存单元
    44                                           ;求个位上的数字
    45 000000AB BA0000                           mov dx,0         ;被除数的高16位为0
    46 000000AE F7F3                             div bx   ;将Dx:AX的数除以bx的数，商在AX中，余数在Dx中
    47                                           ;为什么在dl取，因为10较小，可以取低字节就行
    48 000000B0 8816[2E7D]                       mov [0x7c00+number+0x00],dl   ;保存个位上的数字  number是地址
    49                                           ;这个0x7c00从哪里来的呢   0x7c00表示的是主引导扇区的 位置
    50                                           ;number    源程序编译阶段确定的
    51                                           ;求十位上的数字
    52                                           ;ax是商，dx是高字节(之前存了余数)应该清零再算
    53 000000B4 31D2                             xor dx,dx      ;自己异或自己，清零数据
    54 000000B6 F7F3                             div bx
    55 000000B8 8816[2F7D]                       mov [0x7c00+number+0x01],dl   ;保存十位上的数字
    56                                  
    57                                           ;求百位上的数字
    58 000000BC 31D2                             xor dx,dx
    59 000000BE F7F3                             div bx
    60 000000C0 8816[307D]                       mov [0x7c00+number+0x02],dl   ;保存百位上的数字
    61                                  
    62                                           ;求千位上的数字
    63 000000C4 31D2                             xor dx,dx
    64 000000C6 F7F3                             div bx
    65 000000C8 8816[317D]                       mov [0x7c00+number+0x03],dl   ;保存千位上的数字
    66                                  
    67                                           ;求万位上的数字
    68 000000CC 31D2                             xor dx,dx
    69 000000CE F7F3                             div bx
    70 000000D0 8816[327D]                       mov [0x7c00+number+0x04],dl   ;保存万位上的数字
    71                                  
    72                                           ;以下用十进制显示标号的偏移地址
    73 000000D4 A0[327D]                         mov al,[0x7c00+number+0x04]
    74 000000D7 0430                             add al,0x30        ;得到于该数字对应的ASCII码
    75 000000D9 26A21A00                         mov [es:0x1a],al    ;为什么是这个位置呢，因为之前显示的offset最后是0x19
    76 000000DD 26C6061B0004                     mov byte [es:0x1b],0x04    ;黑底红色，无闪烁，无加亮
    77                                  
    78 000000E3 A0[317D]                         mov al,[0x7c00+number+0x03]
    79 000000E6 0430                             add al,0x30
    80 000000E8 26A21C00                         mov [es:0x1c],al
    81 000000EC 26C6061D0004                     mov byte [es:0x1d],0x04
    82                                  
    83 000000F2 A0[307D]                         mov al,[0x7c00+number+0x02]
    84 000000F5 0430                             add al,0x30
    85 000000F7 26A21E00                         mov [es:0x1e],al
    86 000000FB 26C6061F0004                     mov byte [es:0x1f],0x04
    87                                  
    88 00000101 A0[2F7D]                         mov al,[0x7c00+number+0x01]
    89 00000104 0430                             add al,0x30
    90 00000106 26A22000                         mov [es:0x20],al
    91 0000010A 26C606210004                     mov byte [es:0x21],0x04
    92                                  
    93 00000110 A0[2E7D]                         mov al,[0x7c00+number+0x00]
    94 00000113 0430                             add al,0x30
    95 00000115 26A22200                         mov [es:0x22],al
    96 00000119 26C606230004                     mov byte [es:0x23],0x04
    97                                  
    98 0000011F 26C606240044                     mov byte [es:0x24],'D'   ;表示是十进制
    99 00000125 26C606250007                     mov byte [es:0x25],0x07
   100                                  
   101 0000012B E9FDFF                     infi: jmp near infi                 ;无限循环
   102                                  
   103 0000012E 0000000000                number db 0,0,0,0,0          ;db表示声明 5个字节数据  ，是一种伪指令，供编译器使用
   104                                  
   105 00000133 00<rept>                  times 203 db 0
   106 000001FE 55AA                                db 0x55,0xaa          ;主引导扇区的最后两个字节 规定：  0x55 0xaa
